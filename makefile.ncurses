#
# Makefile for SimpleMail for ncurses UI
#

TARGET_DIR=target-ncurses

ifndef USE_CPLUSPLUS
CC     = $(CROSS_COMPILE)gcc
CFLAGS_LANG = -std=gnu11 -Wdeclaration-after-statement
else
CC     = $(CROSS_COMPILE)g++
CFLAGS_LANG = -std=c++2a
endif
CXX    = $(CROSS_COMPILE)c++
AS     = $(CROSS_COMPILE)as
LD     = $(CROSS_COMPILE)ld
RANLIB = $(CROSS_COMPILE)ranlib
STRIP  = $(CROSS_COMPILE)strip
OBJCOPY= $(CROSS_COMPILE)objcopy

RM     = rm -Rf
MKDIR  = mkdir -p

DATE   := -DSIMPLEMAIL_DATE='"$(shell date +%d.%m.%Y)"' -DSIMPLEMAIL_YEAR='"$(shell date +%Y)"'


SSL_FLAGS = -DUSE_OPENSSL
SSL_INC =
SSL_LINK =
SSL_LIB = -lssl -lcrypto

OBJSDIRSUFFIX=ncurses

# COMMITID, COMMITS, and VERSION_TAG macros
include common-version-tag.mk

# Change these as required
OPTIMIZE = -O3
DEBUG = -g
INC = \
	$(SSL_INC)\
	-I./ncurses\
	-I./indep-include\
	-I.

GLIB_CFLAGS  := $(shell pkg-config glib-2.0 --cflags)
GLIB_LIBS    := $(shell pkg-config glib-2.0 --libs)

CFLAGS = \
	$(DATE)\
	$(DEBUG)\
	$(INC)\
	$(OPTIMIZE)\
	$(SSL_FLAGS)\
	$(GLIB_CFLAGS)\
	-DNDEBUG\
	-DSM_COMMITID=$(COMMITID)\
	-Wall\
	-Wno-deprecated-declarations\
	-fno-strict-aliasing\
	$(CFLAGS_LANG) \
	-Dstricmp=strcasecmp\
	-Dstrnicmp=strncasecmp\

# Flags passed to gcc during linking
LINK = \
	$(SSL_LINK)\
	-Wl,--gc-sections \
	$(DEBUG)

# Name of the "thing" to build
TARGET = $(TARGET_DIR)/SimpleMail$(TARGETSUFFIX)

# Additional linker libraries
LIBS = -lexpat $(SSL_LIB) $(GLIB_LIBS) $(shell pkg-config ncurses --libs)

# Version of the binary to build
VERSION = 0

include common-sources.mk

ARCHSRCS = $(wildcard ncurses/*.c) \
	platform/subthreads_glib.c \
	platform/timesupport_glib.c \
	platform/tcpip_posix.c \
	gtk/support.c


# -------------------------------------------------------------

.PHONY: all
all: $(TARGET)

# -------------------------------------------------------------

include unity.mk

# Will create UNITIES macro
$(call make-unities, $(NONARCHSRCS))

# -------------------------------------------------------------

SRCS=$(ARCHSRCS)

# -------------------------------------------------------------

OBJSDIR=$(TARGET_DIR)/$(CROSS_COMPILE)objs-$(OBJSDIRSUFFIX)

OBJS = \
	$(UNITIES:$(TARGET_DIR)/%.c=$(OBJSDIR)/%.o) \
	$(SRCS:%.c=$(OBJSDIR)/%.o)

# -------------------------------------------------------------

# Construct rules to create the unity files
$(call make-unity-rules, $(UNITIES))

# -------------------------------------------------------------


.PHONY: dirs
dirs:
	-$(MKDIR) $(TARGET_DIR) $(OBJSDIR) $(OBJSDIR)/gtk $(OBJSDIR)/ncurses $(OBJSDIR)/platform $(OBJSDIR)/unities

# Rules for building
$(TARGET): dirs $(OBJS) $(OBJSDIR)/stubs.c
	$(CC) $(INC) $(LINK) $(OBJSDIR)/stubs.c -o $@ $(OBJS) $(LIBS) -Wl,--cref,-M,-Map=$@.map
	$(OBJCOPY) --only-keep-debug $@ $@.debug
	$(STRIP) --strip-all $@
	$(OBJCOPY) --add-gnu-debuglink=$@.debug $@

$(OBJSDIR)/stubs.c: dirs $(OBJS) devtools/gen-stubs.py
	-$(CC) $(LINK) -o $@.debug $(OBJS) $(LIBS) -Wl,--cref,-M,-Map=$@.map 2>$(OBJSDIR)/link.error
# Extract all names of undefined functions
	grep -orP "undefined reference to \`\K.*(?=')" $(OBJSDIR)/link.error | sort -u >$(OBJSDIR)/stub_functions
	python devtools/gen-stubs.py $(OBJSDIR)/stub_functions >$@

# Generate dependencies on the fly
# Inspired by http://scottmcpeak.com/autodepend/autodepend.html
$(OBJSDIR)/%.o: %.c
	$(CC) -MMD -MP $(CFLAGS) -c $< -o $@

$(OBJSDIR)/%.o: $(TARGET_DIR)/%.c
	$(CC) -MMD -MP $(CFLAGS) -c $< -o $@

.PHONY: clean
clean:
	$(RM) $(TARGET) $(OBJS) $(OBJSDIR) $(UNITIES)

.PHONY: run
run: $(TARGET)
	./$(TARGET)

.PHONY: debug
debug: $(TARGET)
	@echo run \'gdb -ex \"target remote localhost:11111\"\' for debugging
	gdbserver :11111 $(TARGET)

.PHONY: debug-valgrind
debug-valgrind: $(TARGET)
	valgrind --tool=memcheck --vgdb=yes --vgdb-error=0 $(TARGET)

# Now include dependencies, but don't fail if they are not available
-include $(OBJS:.o=.d)
